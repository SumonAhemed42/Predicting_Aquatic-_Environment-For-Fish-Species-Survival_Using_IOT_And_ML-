#include <SPI.h>
#include <Wire.h>

#include <Ethernet.h>
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };

#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd = LiquidCrystal_I2C(0x27, 20, 4);

#include <DHT.h>
#define DHTPIN 2
#define DHTTYPE DHT11
#define SensorPin A2         // the pH meter Analog output is connected with the Arduinoâ€™s Analog
unsigned long int avgValue;  //Store the average value of the sensor feedback
int buf[10], temp;

DHT dht(DHTPIN, DHTTYPE);

char server[] = "192.168.50.22";
String ipAddress = "192.168.50.22";
IPAddress ip(192, 168, 0, 177);
EthernetClient client;

void setup() {
  Serial.begin(9600);
  dht.begin();
  lcd.init();
  lcd.backlight();
  pinMode(2, INPUT);
  pinMode(A0, INPUT);
  pinMode(A1, INPUT);

  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    Ethernet.begin(mac, ip);
  }
}

void loop() {
  for (int i = 0; i < 10; i++)  //Get 10 sample value from the sensor for smooth the value
  {
    buf[i] = analogRead(SensorPin);
    delay(10);
  }
  for (int i = 0; i < 9; i++)  //sort the analog from small to large
  {
    for (int j = i + 1; j < 10; j++) {
      if (buf[i] > buf[j]) {
        temp = buf[i];
        buf[i] = buf[j];
        buf[j] = temp;
      }
    }
  }
  avgValue = 0;
  for (int i = 2; i < 8; i++)  //take the average value of 6 center sample
    avgValue += buf[i];
  float phValue = (float)avgValue * 5.0 / 1024 / 6;  //convert the analog into millivolt
  phValue = 3.5 * phValue;                           //convert the millivolt into pH value
  float ph = phValue - 2;

  digitalWrite(13, HIGH);
  delay(800);
  digitalWrite(13, LOW);
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float f = dht.readTemperature(true);

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  // Compute heat index in Fahrenheit (the default)
  float hif = dht.computeHeatIndex(f, h);
  // Compute heat index in Celsius (isFahreheit = false)
  float hic = dht.computeHeatIndex(t, h, false);

  // turbidity part
  int sensorValue = analogRead(A1);  // turbidity to A1
  float turbidity = sensorValue * (5.0 / 1024.0);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("PH: ");
  lcd.print(ph);
  lcd.setCursor(0, 1);
  lcd.print("Temp: ");
  lcd.print(t);
  lcd.setCursor(0, 2);
  lcd.print("Turb: ");
  lcd.print(turbidity);

  sendDataToServer(ph, t, turbidity);
  delay(200);
}

void sendDataToServer(float phValue, float tempValue, float turbValue) {
  if (client.connect(server, 8000)) {
    // Make a HTTP request:
    client.print("GET /sensor-data/create?ph=");
    client.print(phValue);
    client.print("&temp=");
    client.print(tempValue);
    client.print("&turb=");
    client.print(turbValue);

    client.print(" ");  //SPACE BEFORE HTTP/1.1
    client.print("HTTP/1.1");
    client.println();
    client.print("Host: ");
    client.println(server);
    client.println("Connection: close");
    client.println();

    Serial.print(phValue);
    Serial.print("-");
    Serial.print(tempValue);
    Serial.print("-");
    Serial.println(turbValue);
    Serial.println("Connected.");
  } else {
    Serial.println("Connection failed.");
  }

  if (client.available()) {
    char c = client.read();
    Serial.println(c);
  }

  // if the server's disconnected, stop the client:
  /*
  if (!client.connected()) {
    Serial.println();
    Serial.println("disconnecting.");
    client.stop();
  }
*/

}
